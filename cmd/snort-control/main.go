// Copyright (C) 2023 Eneo Tecnologia S.L.
// Diego Fernández Barrera <bigomby@gmail.com>
// Miguel Álvarez <malvarez@redborder.com>
// Miguel Negrón <manegron@redborder.com>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package main

import (
	"flag"
	"net"
	"os"
	"strconv"

	"github.com/Sirupsen/logrus"

	"github.com/redBorder/rb-malware-agent/snortcontrol"
)

type SnortMessage struct {
	version int16
	msgType int16
	length  int32
}

var (
	socket  string
	timeout int
	code    int
)

func init() {
	unixSockFlag := flag.String("socketpath", "", "Unix socket name")
	timeoutFlag := flag.String("timeout", "", "Timeout in milliseconds")
	codeFlag := flag.Int("code", -1, "Code to send")

	flag.Parse()

	if unixSockFlag != nil {
		socket = *unixSockFlag
	} else {
		flag.Usage()
		os.Exit(0)
	}
	if timeoutFlag != nil {
		timeout, _ = strconv.Atoi(*timeoutFlag)
	}
	if *codeFlag > 0 {
		code = *codeFlag
	} else {
		flag.Usage()
		os.Exit(0)
	}
}

func main() {
	s, err := net.Dial("unix", socket)
	if err != nil {
		logrus.Fatal(err)
	}
	defer s.Close()

	code, message, err := snortcontrol.Notify(s, code, timeout)
	if err != nil {
		logrus.Fatal(err)
	}

	logrus.Infof("CODE: %d", code)

	if len(message) > 0 {
		logrus.Infof("MESSAGE: %s", message)
	}
}
