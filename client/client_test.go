// Copyright (C) 2023 Eneo Tecnologia S.L.
// Diego Fernández Barrera <bigomby@gmail.com>
// Miguel Álvarez <malvarez@redborder.com>
// Miguel Negrón <manegron@redborder.com>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package client

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"net/url"
	"testing"

	"github.com/stretchr/testify/assert"
)

func testTool(code int, body string) (*httptest.Server, ApiClient) {

	handler := func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(code)
		w.Header().Set("Content-Type", "application/json")
		fmt.Fprintln(w, body)
	}

	var transport *http.Transport

	server := httptest.NewServer(http.HandlerFunc(handler))

	if code > 0 {
		transport = &http.Transport{
			Proxy: func(req *http.Request) (*url.URL, error) {
				return url.Parse(server.URL)
			},
		}
	} else {
		transport = &http.Transport{
			Proxy: func(req *http.Request) (*url.URL, error) {
				return url.Parse("")
			},
		}
	}

	httpClient := &http.Client{Transport: transport}
	apiClient := NewApiClient(server.URL, httpClient)

	return server, apiClient
}

func Test_NilHttpClient(t *testing.T) {
	apiClient := NewApiClient("", nil)

	assert.Equal(t, apiClient, nil, "Error occurred")
}

func Test_GetCurrentRelease_Success(t *testing.T) {

	server, apiClient := testTool(200, `{"last_release": "2.5"}`)
	defer server.Close()

	revision, incremental, err := apiClient.GetCurrentRelease()

	assert.Equal(t, err, nil, "Error occurred")
	assert.Equal(t, revision, 2, "Revision doesn't match")
	assert.Equal(t, incremental, 5, "Incremental doesn't match")
}

func Test_GetCurrentRelease_FailRevision(t *testing.T) {

	server, apiClient := testTool(200, `{"last_release": "2.5"}`)
	defer server.Close()

	revision, incremental, err := apiClient.GetCurrentRelease()

	assert.Equal(t, err, nil, "Error occurred")
	assert.NotEqual(t, revision, 8, "Revision should not match")
	assert.Equal(t, incremental, 5, "Incremental doesn't match")
}

func Test_GetCurrentRelease_FailIncremental(t *testing.T) {

	server, apiClient := testTool(200, `{"last_release": "2.5"}`)
	defer server.Close()

	revision, incremental, err := apiClient.GetCurrentRelease()

	assert.Equal(t, err, nil, "Error occurred")
	assert.Equal(t, revision, 2, "Revision doesn't match")
	assert.NotEqual(t, incremental, 1, "Incremental should not match")
}

func Test_GetCurrentRelease_WrongJson(t *testing.T) {

	server, apiClient := testTool(200, `"last_release: "2.5"}`)
	defer server.Close()

	_, _, err := apiClient.GetCurrentRelease()

	assert.NotEqual(t, err, nil, "Parsing JSON should FAIL")
}

func Test_GetCurrentRelease_ServerError(t *testing.T) {

	server, apiClient := testTool(500, "")
	defer server.Close()

	_, _, err := apiClient.GetCurrentRelease()

	assert.NotEqual(t, err, nil, "Server should return error")
}

func Test_GetCurrentRelease_ServerFail(t *testing.T) {

	server, apiClient := testTool(-1, "")
	defer server.Close()

	_, _, err := apiClient.GetCurrentRelease()

	assert.NotEqual(t, err, nil, "Server should return error")
}

func Test_GetTotalSuccess(t *testing.T) {

	testData :=
		`
    {
      "data": [{
        "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
        "score": 25,
        "uploaded": false
      }, {
        "hash": "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4",
        "score": 85,
        "uploaded": false
      }, {
        "score": 0,
        "ip": "222.161.187.107"
      }, {
        "score": 50,
        "ip": "104.219.238.81"
      }, {
        "score": 80,
        "ip": "151.80.200.230"
      }]
    }
    `

	server, apiClient := testTool(200, testData)
	defer server.Close()

	resp, err := apiClient.GetTotal()
	if err == nil {
		defer resp.Close()
	}

	body, err := ioutil.ReadAll(resp)

	assert.Equal(t, err, nil, "Error occurred")
	assert.Equal(t, testData+"\n", string(body), "Data sent and received doesn't match")
}

func Test_GetTotalFail(t *testing.T) {

	server, apiClient := testTool(500, "")
	defer server.Close()

	resp, err := apiClient.GetTotal()
	if err == nil {
		defer resp.Close()
	}

	assert.NotEqual(t, err, nil, "An error should have ocurred")
}

func Test_GetTotalServerFail(t *testing.T) {

	server, apiClient := testTool(-1, "")
	defer server.Close()

	resp, err := apiClient.GetTotal()
	if err == nil {
		defer resp.Close()
	}

	assert.NotEqual(t, err, nil, "An error should have ocurred")
}

func Test_GetIncrementalSuccess(t *testing.T) {

	testData :=
		`
    {
      "data": [{
        "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
        "score": 25,
        "uploaded": false
      }, {
        "hash": "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4",
        "score": 85,
        "uploaded": false
      }, {
        "score": 0,
        "ip": "222.161.187.107"
      }, {
        "score": 50,
        "ip": "104.219.238.81"
      }, {
        "score": 80,
        "ip": "151.80.200.230"
      }]
    }
    `

	server, apiClient := testTool(200, testData)
	defer server.Close()

	resp, err := apiClient.GetIncremental(2, 5)
	if err == nil {
		defer resp.Close()
	}

	body, err := ioutil.ReadAll(resp)

	assert.Equal(t, err, nil, "Error occurred")
	assert.Equal(t, testData+"\n", string(body), "Data sent and received doesn't match")
}

func Test_GetIncrementalFail(t *testing.T) {

	server, apiClient := testTool(500, "")
	defer server.Close()

	resp, err := apiClient.GetIncremental(2, 5)
	if err == nil {
		defer resp.Close()
	}

	assert.NotEqual(t, err, nil, "An error should have ocurred")
}

func Test_GetIncrementalServerFail(t *testing.T) {

	server, apiClient := testTool(-1, "")
	defer server.Close()

	resp, err := apiClient.GetIncremental(2, 5)
	if err == nil {
		defer resp.Close()
	}

	assert.NotEqual(t, err, nil, "An error should have ocurred")
}
