// Copyright (C) 2023 Eneo Tecnologia S.L.
// Diego Fernández Barrera <bigomby@gmail.com>
// Miguel Álvarez <malvarez@redborder.com>
// Miguel Negrón <manegron@redborder.com>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package client

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strconv"
	"strings"
)

// ApiClient is an interface for handling the information
type ApiClient interface {
	GetCurrentRelease() (int, int, error)
	GetTotal() (io.ReadCloser, error)
	GetIncremental(int, int) (io.ReadCloser, error)
}

// RbApiClient is the RedBorder's implementation for the RedBorder's Malware API
type RbApiClient struct {
	Url        string
	HTTPClient *http.Client
}

// NewApiClient creates a new client for the given URL.
func NewApiClient(url string, httpClient *http.Client) ApiClient {

	if httpClient == nil {
		return nil
	}

	apiClient := RbApiClient{
		Url:        url,
		HTTPClient: httpClient,
	}

	return apiClient
}

// GetCurrentRelease obtais the current revision and incremental from the API
func (apiClient RbApiClient) GetCurrentRelease() (revision, incremental int, err error) {

	var jsonResp map[string]string

	res, err := apiClient.HTTPClient.Get(apiClient.Url + "/incremental")
	if err != nil {
		return
	}
	defer res.Body.Close()

	if res.StatusCode >= 400 {
		err = errors.New(res.Status)
		return
	}

	decoder := json.NewDecoder(res.Body)
	err = decoder.Decode(&jsonResp)
	if err != nil {
		return
	}

	version := strings.Split(jsonResp["last_release"], ".")

	revision, err = strconv.Atoi(version[0])
	incremental, err = strconv.Atoi(version[1])

	return
}

// GetTotal requests the API for the latest revision returns the current
// revision and incremental
func (apiClient RbApiClient) GetTotal() (body io.ReadCloser, err error) {

	// Perform request and read body
	res, err := apiClient.HTTPClient.Get(apiClient.Url + "/total")
	if err != nil {
		return
	}

	body = res.Body

	if res.StatusCode >= 400 {
		err = errors.New(res.Status)
		body.Close()
		return
	}

	return
}

// GetIncremental requests the API for the specified incremental
func (apiClient RbApiClient) GetIncremental(revision, incremental int) (body io.ReadCloser, err error) {

	// Perform request and read body
	res, err := apiClient.HTTPClient.Get(apiClient.Url + "/incremental/" +
		strconv.Itoa(revision) + "." + strconv.Itoa(incremental))
	if err != nil {
		return
	}

	body = res.Body

	if res.Status != "200 OK" {
		err = errors.New(res.Status)
	}

	return
}
