// Copyright (C) 2023 Eneo Tecnologia S.L.
// Diego Fernández Barrera <bigomby@gmail.com>
// Miguel Álvarez <malvarez@redborder.com>
// Miguel Negrón <manegron@redborder.com>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package client

import (
	"bufio"
	"bytes"
	"errors"
	"fmt"
	"io"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

type ClosingBuffer struct {
	*bytes.Buffer
}

func (cb *ClosingBuffer) Close() (err error) {
	return
}

type MockAPIClient struct {
	mock.Mock
}

func (m *MockAPIClient) GetCurrentRelease() (revision, incremental int, err error) {
	args := m.Mock.Called()
	return args.Int(0), args.Int(1), args.Error(2)
}

func (m *MockAPIClient) GetTotal() (body io.ReadCloser, err error) {
	args := m.Mock.Called()
	return args.Get(0).(io.ReadCloser), args.Error(1)
}

func (m *MockAPIClient) GetIncremental(revision, incremental int) (body io.ReadCloser, err error) {
	args := m.Mock.Called()
	return args.Get(0).(io.ReadCloser), args.Error(1)
}

var instanceData = []InstanceData{
	InstanceData{
		MinScore: 50,

		HashBlacklistPath: "../tests_files/hash_blacklist_1",
		IPBlacklistPath:   "../tests_files/ip_blacklist_1",
		HashWhitelistPath: "../tests_files/hash_whitelist_1",
		IPWhitelistPath:   "../tests_files/ip_whitelist_1",
	},
	InstanceData{
		MinScore: 80,

		HashBlacklistPath: "../tests_files/hash_blacklist_2",
		IPBlacklistPath:   "../tests_files/ip_blacklist_2",
		HashWhitelistPath: "../tests_files/hash_whitelist_2",
		IPWhitelistPath:   "../tests_files/ip_whitelist_2",
	},
}

////////////////////////////////////////////////////////////////////////////////
/// START TESTING
////////////////////////////////////////////////////////////////////////////////

func Test_Init_OnlyTotal(t *testing.T) {
	rcTotal := &ClosingBuffer{
		bytes.NewBufferString(`
	   {
	     "data": [{
	       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
	       "score": 25
	     }, {
	       "hash": "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4",
	       "score": 85
	     }, {
				 "hash": "866a61026809ce28f6ea02261026809ce28f6ea022jd7h7fe097a935bce8ba3d",
				 "score": -1
			 }, {
			 	 "hash": "866a61026809ce28f6ea02261026809ce28f6ea022jd7h7fe097a935bce8ba98",
			   "score": -2
		   }, {
		     "hash": "866a61026809ce28f6ea02261026809ce28f6ea022jd7h7fe097a935bce8ba4f",
		     "score": -3
	     }, {
	       "score": 0,
	       "ip": "222.161.187.107"
	     }, {
	       "score": 50,
	       "ip": "104.219.238.81"
	     }, {
	       "score": 80,
	       "ip": "151.80.200.230"
	     }],
	     "last_release": "2.0"
	   }
	   `),
	}
	defer rcTotal.Close()

	m := &MockAPIClient{}
	m.On("GetTotal").Return(rcTotal, nil)

	r := NewRelease(m, instanceData)
	r.Init()

	assert.Equal(t, 2, r.Revision, "Wrong revision")
	assert.Equal(t, 0, r.Incremental, "Wrong incremental")

	assert.Equal(t, 50, r.instancesData[0].MinScore)

	assert.Equal(t, 2, len(r.instancesData[0].hashBlacklist))
	assert.Equal(t, 2, len(r.instancesData[0].ipBlacklist))

	assert.Equal(t, 85, r.instancesData[0].hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, 50, r.instancesData[0].ipBlacklist["104.219.238.81"], "Wrong IP score")
	assert.Equal(t, 80, r.instancesData[0].ipBlacklist["151.80.200.230"], "Wrong IP score")

	assert.Equal(t, 3, len(r.instancesData[0].hashWhitelist))
	assert.Equal(t, 1, len(r.instancesData[0].ipWhitelist))

	assert.Equal(t, 25, r.instancesData[0].hashWhitelist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"], "Wrong HASH score")
	assert.Equal(t, -2, r.instancesData[0].hashWhitelist["866a61026809ce28f6ea02261026809ce28f6ea022jd7h7fe097a935bce8ba98"], "Wrong HASH score")
	assert.Equal(t, -1, r.instancesData[0].hashWhitelist["866a61026809ce28f6ea02261026809ce28f6ea022jd7h7fe097a935bce8ba3d"], "Wrong HASH score")
	assert.Equal(t, 0, r.instancesData[0].ipWhitelist["222.161.187.107"], "Wrong IP score")

	assert.Equal(t, 80, r.instancesData[1].MinScore)

	assert.Equal(t, 2, len(r.instancesData[1].hashBlacklist))
	assert.Equal(t, 1, len(r.instancesData[1].ipBlacklist))

	assert.Equal(t, 85, r.instancesData[1].hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, -3, r.instancesData[1].hashBlacklist["866a61026809ce28f6ea02261026809ce28f6ea022jd7h7fe097a935bce8ba4f"], "Wrong HASH score")
	assert.Equal(t, 80, r.instancesData[1].ipBlacklist["151.80.200.230"], "Wrong IP score")

	assert.Equal(t, 3, len(r.instancesData[1].hashWhitelist))
	assert.Equal(t, 2, len(r.instancesData[1].ipWhitelist))

	assert.Equal(t, 25, r.instancesData[1].hashWhitelist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"], "Wrong HASH score")
	assert.Equal(t, -2, r.instancesData[1].hashWhitelist["866a61026809ce28f6ea02261026809ce28f6ea022jd7h7fe097a935bce8ba98"], "Wrong HASH score")
	assert.Equal(t, -1, r.instancesData[1].hashWhitelist["866a61026809ce28f6ea02261026809ce28f6ea022jd7h7fe097a935bce8ba3d"], "Wrong HASH score")
	assert.Equal(t, 0, r.instancesData[1].ipWhitelist["222.161.187.107"], "Wrong IP score")
	assert.Equal(t, 50, r.instancesData[1].ipWhitelist["104.219.238.81"], "Wrong IP score")
}

////////////////////////////////////////////////////////////////////////////////

func Test_Init_GetTotalError(t *testing.T) {
	m := &MockAPIClient{}
	m.On("GetTotal").Return((*ClosingBuffer)(nil), errors.New("Error"))

	r := NewRelease(m, instanceData)
	r.Init()

	fmt.Print(r)

	assert.Equal(t, 0, r.Revision, "Wrong revision")
	assert.Equal(t, 0, r.Incremental, "Wrong incremental")

	assert.Equal(t, 0, len(r.instancesData[0].hashBlacklist))
	assert.Equal(t, 0, len(r.instancesData[0].ipBlacklist))

	assert.Equal(t, 0, len(r.instancesData[0].hashWhitelist))
	assert.Equal(t, 0, len(r.instancesData[0].ipWhitelist))

	assert.Equal(t, 0, len(r.instancesData[1].hashBlacklist))
	assert.Equal(t, 0, len(r.instancesData[1].ipBlacklist))

	assert.Equal(t, 0, len(r.instancesData[1].hashWhitelist))
	assert.Equal(t, 0, len(r.instancesData[1].ipWhitelist))
}

////////////////////////////////////////////////////////////////////////////////

func Test_Init_ProcessTotalError(t *testing.T) {
	rcTotal := &ClosingBuffer{
		bytes.NewBufferString(`
     {
       WRONG JSON"data": [{
         "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
         "score": 25,
         "uploaded": false
       }, {
         "hash": "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4",
         "score": 85,
         "uploaded": false
       }, {
         "score": 0,
         "ip": "222.161.187.107"
       }, {
         "score": 50,
         "ip": "104.219.238.81"
       }, {
         "score": 80,
         "ip": "151.80.200.230"
       }],
       "last_release": "2.0"
     }
     `),
	}

	m := &MockAPIClient{}
	m.On("GetTotal").Return(rcTotal, nil)

	r := NewRelease(m, instanceData)
	r.Init()

	assert.Equal(t, 0, r.Revision, "Wrong revision")
	assert.Equal(t, 0, r.Incremental, "Wrong incremental")

	assert.Equal(t, 0, len(r.instancesData[0].hashBlacklist))
	assert.Equal(t, 0, len(r.instancesData[0].ipBlacklist))

	assert.Equal(t, 0, len(r.instancesData[0].hashWhitelist))
	assert.Equal(t, 0, len(r.instancesData[0].ipWhitelist))

	assert.Equal(t, 0, len(r.instancesData[1].hashBlacklist))
	assert.Equal(t, 0, len(r.instancesData[1].ipBlacklist))

	assert.Equal(t, 0, len(r.instancesData[1].hashWhitelist))
	assert.Equal(t, 0, len(r.instancesData[1].ipWhitelist))
}

////////////////////////////////////////////////////////////////////////////////

func Test_Init_WithIncremental(t *testing.T) {
	total :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 25,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4",
       "score": 85,
       "uploaded": false
     }, {
       "score": 0,
       "ip": "222.161.187.107"
     }, {
       "score": 50,
       "ip": "104.219.238.81"
     }, {
       "score": 80,
       "ip": "151.80.200.230"
     }],
     "last_release": "2.1"
   }
   `

	incremental :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 75,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1",
       "score": 0,
       "uploaded": false
		 }, {
			 "hash": "866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff6596153d",
			 "score": -1,
			 "uploaded": false
		 }, {
			 "hash": "866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff6596159f",
			 "score": -3,
			 "uploaded": false
		 }, {
       "score": 80,
       "ip": "222.161.187.107"
     }, {
       "score": 15,
       "ip": "151.80.200.230"
     }],
     "last_release": "2.1"
   }
   `

	rcTotal := &ClosingBuffer{
		bytes.NewBufferString(total),
	}
	defer rcTotal.Close()

	rcIncremental := &ClosingBuffer{
		bytes.NewBufferString(incremental),
	}
	defer rcIncremental.Close()

	m := &MockAPIClient{}
	m.On("GetTotal").Return(rcTotal, nil)
	m.On("GetIncremental").Return(rcIncremental, nil)

	r := NewRelease(m, instanceData)
	r.Init()

	assert.Equal(t, 2, r.Revision, "Wrong revision")
	assert.Equal(t, 1, r.Incremental, "Wrong incremental")

	// Instance 1

	assert.Equal(t, 3, len(r.instancesData[0].hashBlacklist))
	assert.Equal(t, 2, len(r.instancesData[0].ipBlacklist))

	assert.Equal(t, 85, r.instancesData[0].hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, 75, r.instancesData[0].hashBlacklist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"], "Wrong HASH score")
	assert.Equal(t, -3, r.instancesData[0].hashBlacklist["866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff6596159f"], "Wrong HASH score")
	assert.Equal(t, 50, r.instancesData[0].ipBlacklist["104.219.238.81"], "Wrong IP score")
	assert.Equal(t, 80, r.instancesData[0].ipBlacklist["222.161.187.107"], "Wrong IP score")

	assert.Equal(t, 2, len(r.instancesData[0].hashWhitelist))
	assert.Equal(t, 1, len(r.instancesData[0].ipWhitelist))

	assert.Equal(t, 0, r.instancesData[0].hashWhitelist["866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1"], "Wrong HASH score")
	assert.Equal(t, -1, r.instancesData[0].hashWhitelist["866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff6596153d"], "Wrong HASH score")
	assert.Equal(t, 15, r.instancesData[0].ipWhitelist["151.80.200.230"], "Wrong IP score")

	// Instance 2

	assert.Equal(t, 2, len(r.instancesData[1].hashBlacklist))
	assert.Equal(t, 1, len(r.instancesData[1].ipBlacklist))

	assert.Equal(t, 85, r.instancesData[1].hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, -3, r.instancesData[1].hashBlacklist["866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff6596159f"], "Wrong HASH score")
	assert.Equal(t, 80, r.instancesData[1].ipBlacklist["222.161.187.107"], "Wrong IP score")

	assert.Equal(t, 3, len(r.instancesData[1].hashWhitelist))
	assert.Equal(t, 2, len(r.instancesData[1].ipWhitelist))

	assert.Equal(t, 0, r.instancesData[1].hashWhitelist["866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1"], "Wrong HASH score")
	assert.Equal(t, 75, r.instancesData[1].hashWhitelist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"], "Wrong HASH score")
	assert.Equal(t, -1, r.instancesData[1].hashWhitelist["866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff6596153d"], "Wrong HASH score")
	assert.Equal(t, 15, r.instancesData[1].ipWhitelist["151.80.200.230"], "Wrong IP score")
	assert.Equal(t, 50, r.instancesData[1].ipWhitelist["104.219.238.81"], "Wrong IP score")
}

////////////////////////////////////////////////////////////////////////////////

func Test_Init_GetIncrementalError(t *testing.T) {
	total :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 25,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4",
       "score": 85,
       "uploaded": false
     }, {
       "score": 0,
       "ip": "222.161.187.107"
     }, {
       "score": 50,
       "ip": "104.219.238.81"
     }, {
       "score": 80,
       "ip": "151.80.200.230"
     }],
     "last_release": "2.1"
   }
   `
	rcTotal := &ClosingBuffer{
		bytes.NewBufferString(total),
	}
	defer rcTotal.Close()

	m := &MockAPIClient{}
	m.On("GetTotal").Return(rcTotal, nil)
	m.On("GetIncremental").Return((*ClosingBuffer)(nil), errors.New("Error"))

	r := NewRelease(m, instanceData)
	r.Init()

	assert.Equal(t, 0, r.Revision, "Wrong revision")
	assert.Equal(t, 0, r.Incremental, "Wrong incremental")

	// Instance 1

	assert.Equal(t, 1, len(r.instancesData[0].hashBlacklist))
	assert.Equal(t, 2, len(r.instancesData[0].ipBlacklist))

	assert.Equal(t, 1, len(r.instancesData[0].hashWhitelist))
	assert.Equal(t, 1, len(r.instancesData[0].ipWhitelist))

	// Instance 2

	assert.Equal(t, 1, len(r.instancesData[1].hashBlacklist))
	assert.Equal(t, 1, len(r.instancesData[1].ipBlacklist))

	assert.Equal(t, 1, len(r.instancesData[1].hashWhitelist))
	assert.Equal(t, 2, len(r.instancesData[1].ipWhitelist))
}

////////////////////////////////////////////////////////////////////////////////

func Test_Init_ProcessIncrementalError(t *testing.T) {
	total :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 25,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4",
       "score": 85,
       "uploaded": false
     }, {
       "score": 0,
       "ip": "222.161.187.107"
     }, {
       "score": 50,
       "ip": "104.219.238.81"
     }, {
       "score": 80,
       "ip": "151.80.200.230"
     }],
     "last_release": "2.1"
   }
   `

	incremental :=
		`
   {
     WRONGJSON"data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 75,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1",
       "score": 0,
       "uploaded": false
     }, {
       "score": 80,
       "ip": "222.161.187.107"
     }, {
       "score": 15,
       "ip": "151.80.200.230"
     }],
     "last_release": "2.1"
   }
   `

	rcTotal := &ClosingBuffer{
		bytes.NewBufferString(total),
	}
	defer rcTotal.Close()

	rcIncremental := &ClosingBuffer{
		bytes.NewBufferString(incremental),
	}
	defer rcIncremental.Close()

	m := &MockAPIClient{}
	m.On("GetTotal").Return(rcTotal, nil)
	m.On("GetIncremental").Return(rcTotal, nil)

	r := NewRelease(m, instanceData)
	r.Init()

	assert.Equal(t, 0, r.Revision, "Wrong revision")
	assert.Equal(t, 0, r.Incremental, "Wrong incremental")

	// Instance 1

	assert.Equal(t, 1, len(r.instancesData[0].hashBlacklist))
	assert.Equal(t, 2, len(r.instancesData[0].ipBlacklist))

	assert.Equal(t, 1, len(r.instancesData[0].hashWhitelist))
	assert.Equal(t, 1, len(r.instancesData[0].ipWhitelist))

	// Instance 2

	assert.Equal(t, 1, len(r.instancesData[1].hashBlacklist))
	assert.Equal(t, 1, len(r.instancesData[1].ipBlacklist))

	assert.Equal(t, 1, len(r.instancesData[1].hashWhitelist))
	assert.Equal(t, 2, len(r.instancesData[1].ipWhitelist))
}

////////////////////////////////////////////////////////////////////////////////

func Test_Update_Incremental(t *testing.T) {

	incremental :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 75,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1",
       "score": 0,
       "uploaded": false
     }, {
       "score": 80,
       "ip": "222.161.187.107"
     }, {
       "score": 15,
       "ip": "151.80.200.230"
     }],
     "last_release": "2.2"
   }
   `

	rcIncremental := &ClosingBuffer{
		bytes.NewBufferString(incremental),
	}
	defer rcIncremental.Close()

	m := &MockAPIClient{}
	m.On("GetIncremental").Return(rcIncremental, nil)
	m.On("GetCurrentRelease").Return(2, 2, nil)

	r := NewRelease(m, instanceData)

	r.Revision = 2
	r.Incremental = 0

	r.instancesData[0].hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"] = 85
	r.instancesData[1].hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"] = 85

	r.instancesData[0].ipBlacklist["151.80.200.230"] = 80
	r.instancesData[1].ipBlacklist["151.80.200.230"] = 80

	r.instancesData[0].ipBlacklist["104.219.238.81"] = 50
	r.instancesData[1].ipWhitelist["104.219.238.81"] = 50

	r.instancesData[0].hashWhitelist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"] = 25
	r.instancesData[1].hashWhitelist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"] = 25

	r.instancesData[0].ipWhitelist["222.161.187.107"] = 0
	r.instancesData[1].ipWhitelist["222.161.187.107"] = 0

	r.Update()

	assert.Equal(t, 2, r.Revision, "Wrong revision")
	assert.Equal(t, 2, r.Incremental, "Wrong incremental")

	// Instance 1

	assert.Equal(t, 2, len(r.instancesData[0].hashBlacklist))
	assert.Equal(t, 2, len(r.instancesData[0].ipBlacklist))

	assert.Equal(t, 85, r.instancesData[0].hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, 75, r.instancesData[0].hashBlacklist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"], "Wrong HASH score")
	assert.Equal(t, 50, r.instancesData[0].ipBlacklist["104.219.238.81"], "Wrong IP score")
	assert.Equal(t, 80, r.instancesData[0].ipBlacklist["222.161.187.107"], "Wrong IP score")

	assert.Equal(t, 1, len(r.instancesData[0].hashWhitelist))
	assert.Equal(t, 1, len(r.instancesData[0].ipWhitelist))

	assert.Equal(t, 0, r.instancesData[0].hashWhitelist["866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1"], "Wrong HASH score")
	assert.Equal(t, 15, r.instancesData[0].ipWhitelist["151.80.200.230"], "Wrong IP score")

	// Instance 2

	assert.Equal(t, 1, len(r.instancesData[1].hashBlacklist))
	assert.Equal(t, 1, len(r.instancesData[1].ipBlacklist))

	assert.Equal(t, 85, r.instancesData[1].hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, 80, r.instancesData[1].ipBlacklist["222.161.187.107"], "Wrong IP score")

	assert.Equal(t, 2, len(r.instancesData[1].hashWhitelist))
	assert.Equal(t, 2, len(r.instancesData[1].ipWhitelist))

	assert.Equal(t, 75, r.instancesData[1].hashWhitelist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"], "Wrong HASH score")
	assert.Equal(t, 0, r.instancesData[1].hashWhitelist["866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1"], "Wrong HASH score")
	assert.Equal(t, 15, r.instancesData[1].ipWhitelist["151.80.200.230"], "Wrong IP score")
	assert.Equal(t, 50, r.instancesData[1].ipWhitelist["104.219.238.81"], "Wrong IP score")
}

////////////////////////////////////////////////////////////////////////////////

func Test_Update_Revision(t *testing.T) {

	total :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 25,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4",
       "score": 85,
       "uploaded": false
     }, {
       "score": 0,
       "ip": "222.161.187.107"
     }, {
       "score": 50,
       "ip": "104.219.238.81"
     }, {
       "score": 80,
       "ip": "151.80.200.230"
     }],
     "last_release": "3.1"
   }
   `

	incremental :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 75,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1",
       "score": 0,
       "uploaded": false
     }, {
       "score": 80,
       "ip": "222.161.187.107"
     }, {
       "score": 15,
       "ip": "151.80.200.230"
     }],
     "last_release": "3.1"
   }
   `

	rcTotal := &ClosingBuffer{
		bytes.NewBufferString(total),
	}
	defer rcTotal.Close()

	rcIncremental := &ClosingBuffer{
		bytes.NewBufferString(incremental),
	}
	defer rcIncremental.Close()

	m := &MockAPIClient{}
	m.On("GetTotal").Return(rcTotal, nil)
	m.On("GetIncremental").Return(rcIncremental, nil)
	m.On("GetCurrentRelease").Return(3, 2, nil)

	r := NewRelease(m, instanceData)

	r.Revision = 2
	r.Incremental = 3

	r.Update()

	assert.Equal(t, 3, r.Revision, "Wrong revision")
	assert.Equal(t, 1, r.Incremental, "Wrong incremental")

	// Instance 2

	assert.Equal(t, 2, len(r.instancesData[0].hashBlacklist))
	assert.Equal(t, 2, len(r.instancesData[0].ipBlacklist))

	assert.Equal(t, 85, r.instancesData[0].hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, 75, r.instancesData[0].hashBlacklist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"], "Wrong HASH score")
	assert.Equal(t, 50, r.instancesData[0].ipBlacklist["104.219.238.81"], "Wrong IP score")
	assert.Equal(t, 80, r.instancesData[0].ipBlacklist["222.161.187.107"], "Wrong IP score")

	assert.Equal(t, 1, len(r.instancesData[0].hashWhitelist))
	assert.Equal(t, 1, len(r.instancesData[0].ipWhitelist))

	assert.Equal(t, 0, r.instancesData[0].hashWhitelist["866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1"], "Wrong HASH score")
	assert.Equal(t, 15, r.instancesData[0].ipWhitelist["151.80.200.230"], "Wrong IP score")

	// Instance 2

	assert.Equal(t, 1, len(r.instancesData[1].hashBlacklist))
	assert.Equal(t, 1, len(r.instancesData[1].ipBlacklist))

	assert.Equal(t, 85, r.instancesData[1].hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, 80, r.instancesData[1].ipBlacklist["222.161.187.107"], "Wrong IP score")

	assert.Equal(t, 2, len(r.instancesData[1].hashWhitelist))
	assert.Equal(t, 2, len(r.instancesData[1].ipWhitelist))

	assert.Equal(t, 75, r.instancesData[1].hashWhitelist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"], "Wrong HASH score")
	assert.Equal(t, 0, r.instancesData[1].hashWhitelist["866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1"], "Wrong HASH score")
	assert.Equal(t, 15, r.instancesData[1].ipWhitelist["151.80.200.230"], "Wrong IP score")
	assert.Equal(t, 50, r.instancesData[1].ipWhitelist["104.219.238.81"], "Wrong IP score")
}

////////////////////////////////////////////////////////////////////////////////

func Test_UpdateRevision_GetTotalError(t *testing.T) {
	total :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 25,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4",
       "score": 85,
       "uploaded": false
     }, {
       "score": 0,
       "ip": "222.161.187.107"
     }, {
       "score": 50,
       "ip": "104.219.238.81"
     }, {
       "score": 80,
       "ip": "151.80.200.230"
     }],
     "last_release": "3.1"
   }
   `

	incremental :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 75,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1",
       "score": 0,
       "uploaded": false
     }, {
       "score": 80,
       "ip": "222.161.187.107"
     }, {
       "score": 15,
       "ip": "151.80.200.230"
     }],
     "last_release": "3.1"
   }
   `

	rcTotal := &ClosingBuffer{
		bytes.NewBufferString(total),
	}
	defer rcTotal.Close()

	rcIncremental := &ClosingBuffer{
		bytes.NewBufferString(incremental),
	}
	defer rcIncremental.Close()

	m := &MockAPIClient{}
	m.On("GetTotal").Return((*ClosingBuffer)(nil), errors.New("Error"))
	m.On("GetIncremental").Return(rcIncremental, nil)
	m.On("GetCurrentRelease").Return(3, 2, nil)

	r := NewRelease(m, instanceData)

	r.Revision = 2
	r.Incremental = 3

	r.instancesData[0].hashBlacklist["hash60"] = 60
	r.instancesData[0].hashWhitelist["hash40"] = 40
	r.instancesData[0].ipBlacklist["ip65"] = 65
	r.instancesData[0].ipWhitelist["ip35"] = 35
	r.instancesData[1].hashWhitelist["hash60"] = 60
	r.instancesData[1].hashWhitelist["hash40"] = 40
	r.instancesData[1].ipWhitelist["ip65"] = 65
	r.instancesData[1].ipWhitelist["ip35"] = 35

	r.Update()

	assert.Equal(t, 2, r.Revision, "Wrong revision")
	assert.Equal(t, 3, r.Incremental, "Wrong incremental")

	// Instance 1

	assert.Equal(t, 1, len(r.instancesData[0].hashBlacklist))
	assert.Equal(t, 1, len(r.instancesData[0].ipBlacklist))

	assert.Equal(t, 60, r.instancesData[0].hashBlacklist["hash60"], "Wrong HASH score")
	assert.Equal(t, 65, r.instancesData[0].ipBlacklist["ip65"], "Wrong IP score")

	assert.Equal(t, 1, len(r.instancesData[0].hashWhitelist))
	assert.Equal(t, 1, len(r.instancesData[0].ipWhitelist))

	assert.Equal(t, 40, r.instancesData[0].hashWhitelist["hash40"], "Wrong HASH score")
	assert.Equal(t, 35, r.instancesData[0].ipWhitelist["ip35"], "Wrong IP score")

	// Instance 2

	assert.Equal(t, 0, len(r.instancesData[1].hashBlacklist))
	assert.Equal(t, 0, len(r.instancesData[1].ipBlacklist))

	assert.Equal(t, 2, len(r.instancesData[1].hashWhitelist))
	assert.Equal(t, 2, len(r.instancesData[1].ipWhitelist))

	assert.Equal(t, 40, r.instancesData[1].hashWhitelist["hash40"], "Wrong HASH score")
	assert.Equal(t, 60, r.instancesData[1].hashWhitelist["hash60"], "Wrong HASH score")
	assert.Equal(t, 35, r.instancesData[1].ipWhitelist["ip35"], "Wrong IP score")
	assert.Equal(t, 65, r.instancesData[1].ipWhitelist["ip65"], "Wrong IP score")
}

////////////////////////////////////////////////////////////////////////////////

func Test_UpdateRevision_ProcessTotalError(t *testing.T) {
	total :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 25,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4",
       "score": 85,
       "uploaded": false
     }, {
       "score": 0,
       "ip": "222.161.187.107"
     }, {
       "score": 50,
       "ip": "104.219.238.81"
     }, {
       "score": 80,
       "ip": "151.80.200.230"
     }],
     "last_release": "3.1"WRONGJSON
   }
   `

	incremental :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 75,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1",
       "score": 0,
       "uploaded": false
     }, {
       "score": 80,
       "ip": "222.161.187.107"
     }, {
       "score": 15,
       "ip": "151.80.200.230"
     }],
     "last_release": "3.1"
   }
   `

	rcTotal := &ClosingBuffer{
		bytes.NewBufferString(total),
	}
	defer rcTotal.Close()

	rcIncremental := &ClosingBuffer{
		bytes.NewBufferString(incremental),
	}
	defer rcIncremental.Close()

	m := &MockAPIClient{}
	m.On("GetTotal").Return(rcTotal, nil)
	m.On("GetIncremental").Return(rcIncremental, nil)
	m.On("GetCurrentRelease").Return(3, 2, nil)

	r := NewRelease(m, instanceData)

	r.Revision = 2
	r.Incremental = 3
	r.instancesData[0].hashBlacklist["hash60"] = 60
	r.instancesData[0].hashWhitelist["hash40"] = 40
	r.instancesData[0].ipBlacklist["ip65"] = 65
	r.instancesData[0].ipWhitelist["ip35"] = 35
	r.instancesData[1].hashWhitelist["hash60"] = 60
	r.instancesData[1].hashWhitelist["hash40"] = 40
	r.instancesData[1].ipWhitelist["ip65"] = 65
	r.instancesData[1].ipWhitelist["ip35"] = 35

	r.Update()

	assert.Equal(t, 2, r.Revision, "Wrong revision")
	assert.Equal(t, 3, r.Incremental, "Wrong incremental")

	// Instance 1

	assert.Equal(t, 1, len(r.instancesData[0].hashBlacklist))
	assert.Equal(t, 1, len(r.instancesData[0].ipBlacklist))

	assert.Equal(t, 60, r.instancesData[0].hashBlacklist["hash60"], "Wrong HASH score")
	assert.Equal(t, 65, r.instancesData[0].ipBlacklist["ip65"], "Wrong IP score")

	assert.Equal(t, 1, len(r.instancesData[0].hashWhitelist))
	assert.Equal(t, 1, len(r.instancesData[0].ipWhitelist))

	assert.Equal(t, 40, r.instancesData[0].hashWhitelist["hash40"], "Wrong HASH score")
	assert.Equal(t, 35, r.instancesData[0].ipWhitelist["ip35"], "Wrong IP score")

	// Instance 2

	assert.Equal(t, 0, len(r.instancesData[1].hashBlacklist))
	assert.Equal(t, 0, len(r.instancesData[1].ipBlacklist))

	assert.Equal(t, 2, len(r.instancesData[1].hashWhitelist))
	assert.Equal(t, 2, len(r.instancesData[1].ipWhitelist))

	assert.Equal(t, 40, r.instancesData[1].hashWhitelist["hash40"], "Wrong HASH score")
	assert.Equal(t, 60, r.instancesData[1].hashWhitelist["hash60"], "Wrong HASH score")
	assert.Equal(t, 35, r.instancesData[1].ipWhitelist["ip35"], "Wrong IP score")
	assert.Equal(t, 65, r.instancesData[1].ipWhitelist["ip65"], "Wrong IP score")
}

////////////////////////////////////////////////////////////////////////////////

func Test_UpdateRevision_GetIncrementalError(t *testing.T) {
	total :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1",
       "score": 25,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4",
       "score": 85,
       "uploaded": false
     }, {
       "score": 0,
       "ip": "222.161.187.107"
     }, {
       "score": 50,
       "ip": "104.219.238.81"
     }, {
       "score": 80,
       "ip": "151.80.200.230"
     }],
     "last_release": "3.1"
   }
   `

	rcTotal := &ClosingBuffer{
		bytes.NewBufferString(total),
	}
	defer rcTotal.Close()

	m := &MockAPIClient{}
	m.On("GetTotal").Return(rcTotal, nil)
	m.On("GetIncremental").Return((*ClosingBuffer)(nil), errors.New("Error"))
	m.On("GetCurrentRelease").Return(3, 2, nil)

	r := NewRelease(m, instanceData)

	r.Revision = 2
	r.Incremental = 3
	r.instancesData[0].hashBlacklist["hash60"] = 60
	r.instancesData[0].hashWhitelist["hash40"] = 40
	r.instancesData[0].ipBlacklist["ip65"] = 65
	r.instancesData[0].ipWhitelist["ip35"] = 35
	r.instancesData[1].hashWhitelist["hash60"] = 60
	r.instancesData[1].hashWhitelist["hash40"] = 40
	r.instancesData[1].ipWhitelist["ip65"] = 65
	r.instancesData[1].ipWhitelist["ip35"] = 35

	r.Update()

	assert.Equal(t, 3, r.Revision, "Wrong revision")
	assert.Equal(t, 0, r.Incremental, "Wrong incremental")

	// Instance 1

	assert.Equal(t, 1, len(r.instancesData[0].hashBlacklist))
	assert.Equal(t, 2, len(r.instancesData[0].ipBlacklist))

	assert.Equal(t, 85, r.instancesData[0].hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, 50, r.instancesData[0].ipBlacklist["104.219.238.81"], "Wrong IP score")
	assert.Equal(t, 80, r.instancesData[0].ipBlacklist["151.80.200.230"], "Wrong IP score")

	assert.Equal(t, 1, len(r.instancesData[0].hashWhitelist))
	assert.Equal(t, 1, len(r.instancesData[0].ipWhitelist))

	assert.Equal(t, 25, r.instancesData[0].hashWhitelist["866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1"], "Wrong HASH score")
	assert.Equal(t, 0, r.instancesData[0].ipWhitelist["222.161.187.107"], "Wrong IP score")

	// Instance 3

	assert.Equal(t, 1, len(r.instancesData[1].hashBlacklist))
	assert.Equal(t, 1, len(r.instancesData[1].ipBlacklist))

	assert.Equal(t, 85, r.instancesData[1].hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, 80, r.instancesData[1].ipBlacklist["151.80.200.230"], "Wrong IP score")

	assert.Equal(t, 1, len(r.instancesData[1].hashWhitelist))
	assert.Equal(t, 2, len(r.instancesData[1].ipWhitelist))

	assert.Equal(t, 25, r.instancesData[1].hashWhitelist["866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1"], "Wrong HASH score")
	assert.Equal(t, 0, r.instancesData[1].ipWhitelist["222.161.187.107"], "Wrong IP score")
	assert.Equal(t, 50, r.instancesData[1].ipWhitelist["104.219.238.81"], "Wrong IP score")
}

////////////////////////////////////////////////////////////////////////////////

func Test_UpdateRevision_ProcessIncrementalError(t *testing.T) {
	total :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 25,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4",
       "score": 85,
       "uploaded": false
     }, {
       "score": 0,
       "ip": "222.161.187.107"
     }, {
       "score": 50,
       "ip": "104.219.238.81"
     }, {
       "score": 80,
       "ip": "151.80.200.230"
     }],
     "last_release": "3.1"
   }
   `

	incremental :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 75,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1",
       "score": 0,
       "uploaded": false
     }, {
       "score": 80,
       "ip": "222.161.187.107"
     }, {
       "score": 15,
       "ip": "151.80.200.230"
     }],
     "last_release": "3.1"WRONGJSON
   }
   `

	rcTotal := &ClosingBuffer{
		bytes.NewBufferString(total),
	}
	defer rcTotal.Close()

	rcIncremental := &ClosingBuffer{
		bytes.NewBufferString(incremental),
	}
	defer rcIncremental.Close()

	m := &MockAPIClient{}
	m.On("GetTotal").Return(rcTotal, nil)
	m.On("GetIncremental").Return(rcIncremental, nil)
	m.On("GetCurrentRelease").Return(3, 2, nil)

	r := NewRelease(m, instanceData)

	r.Revision = 2
	r.Incremental = 3
	r.instancesData[0].hashBlacklist["hash60"] = 60
	r.instancesData[0].hashWhitelist["hash40"] = 40
	r.instancesData[0].ipBlacklist["ip65"] = 65
	r.instancesData[0].ipWhitelist["ip35"] = 35
	r.instancesData[1].hashWhitelist["hash60"] = 60
	r.instancesData[1].hashWhitelist["hash40"] = 40
	r.instancesData[1].ipWhitelist["ip65"] = 65
	r.instancesData[1].ipWhitelist["ip35"] = 35

	r.Update()

	assert.Equal(t, 3, r.Revision, "Wrong revision")
	assert.Equal(t, 0, r.Incremental, "Wrong incremental")

	// Instance 1

	assert.Equal(t, 1, len(r.instancesData[0].hashBlacklist))
	assert.Equal(t, 2, len(r.instancesData[0].ipBlacklist))

	assert.Equal(t, 85, r.instancesData[0].hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, 50, r.instancesData[0].ipBlacklist["104.219.238.81"], "Wrong IP score")
	assert.Equal(t, 80, r.instancesData[0].ipBlacklist["151.80.200.230"], "Wrong IP score")

	assert.Equal(t, 1, len(r.instancesData[0].hashWhitelist))
	assert.Equal(t, 1, len(r.instancesData[0].ipWhitelist))

	assert.Equal(t, 25, r.instancesData[0].hashWhitelist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"], "Wrong HASH score")
	assert.Equal(t, 0, r.instancesData[0].ipWhitelist["222.161.187.107"], "Wrong IP score")

	// Instance 2

	assert.Equal(t, 1, len(r.instancesData[1].hashBlacklist))
	assert.Equal(t, 1, len(r.instancesData[1].ipBlacklist))

	assert.Equal(t, 85, r.instancesData[1].hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"], "Wrong HASH score")
	assert.Equal(t, 80, r.instancesData[1].ipBlacklist["151.80.200.230"], "Wrong IP score")

	assert.Equal(t, 1, len(r.instancesData[1].hashWhitelist))
	assert.Equal(t, 2, len(r.instancesData[1].ipWhitelist))

	assert.Equal(t, 25, r.instancesData[1].hashWhitelist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"], "Wrong HASH score")
	assert.Equal(t, 50, r.instancesData[1].ipWhitelist["104.219.238.81"], "Wrong IP score")
	assert.Equal(t, 0, r.instancesData[1].ipWhitelist["222.161.187.107"], "Wrong IP score")
}

////////////////////////////////////////////////////////////////////////////////

func Test_UpdateIncremental_GetIncrementalError(t *testing.T) {
	m := &MockAPIClient{}
	m.On("GetIncremental").Return((*ClosingBuffer)(nil), errors.New("Error"))
	m.On("GetCurrentRelease").Return(2, 5, nil)

	r := NewRelease(m, instanceData)

	r.Revision = 2
	r.Incremental = 3
	r.instancesData[0].hashBlacklist["hash60"] = 60
	r.instancesData[0].hashWhitelist["hash40"] = 40
	r.instancesData[0].ipBlacklist["ip65"] = 65
	r.instancesData[0].ipWhitelist["ip35"] = 35
	r.instancesData[1].hashWhitelist["hash60"] = 60
	r.instancesData[1].hashWhitelist["hash40"] = 40
	r.instancesData[1].ipWhitelist["ip65"] = 65
	r.instancesData[1].ipWhitelist["ip35"] = 35

	r.Update()

	assert.Equal(t, 2, r.Revision, "Wrong revision")
	assert.Equal(t, 3, r.Incremental, "Wrong incremental")

	// Instance 1

	assert.Equal(t, 1, len(r.instancesData[0].hashBlacklist))
	assert.Equal(t, 1, len(r.instancesData[0].ipBlacklist))

	assert.Equal(t, 60, r.instancesData[0].hashBlacklist["hash60"], "Wrong HASH score")
	assert.Equal(t, 65, r.instancesData[0].ipBlacklist["ip65"], "Wrong IP score")

	assert.Equal(t, 1, len(r.instancesData[0].hashWhitelist))
	assert.Equal(t, 1, len(r.instancesData[0].ipWhitelist))

	assert.Equal(t, 40, r.instancesData[0].hashWhitelist["hash40"], "Wrong HASH score")
	assert.Equal(t, 35, r.instancesData[0].ipWhitelist["ip35"], "Wrong IP score")

	// Instance 1

	assert.Equal(t, 0, len(r.instancesData[1].hashBlacklist))
	assert.Equal(t, 0, len(r.instancesData[1].ipBlacklist))

	assert.Equal(t, 2, len(r.instancesData[1].hashWhitelist))
	assert.Equal(t, 2, len(r.instancesData[1].ipWhitelist))

	assert.Equal(t, 40, r.instancesData[1].hashWhitelist["hash40"], "Wrong HASH score")
	assert.Equal(t, 60, r.instancesData[1].hashWhitelist["hash60"], "Wrong HASH score")
	assert.Equal(t, 35, r.instancesData[1].ipWhitelist["ip35"], "Wrong IP score")
	assert.Equal(t, 65, r.instancesData[1].ipWhitelist["ip65"], "Wrong IP score")
}

////////////////////////////////////////////////////////////////////////////////

func Test_UpdateIncremental_ProcessIncrementalError(t *testing.T) {
	incremental :=
		`
   {
     "data": [{
       "hash": "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4",
       "score": 75,
       "uploaded": false
     }, {
       "hash": "866a61026809ce28f6ea01321607fe097a935bce8ba3f653acfb51ff659615d1",
       "score": 0,
       "uploaded": false
     }, {
       "score": 80,
       "ip": "222.161.187.107"
     }, {
       "score": 15,
       "ip": "151.80.200.230"
     }],
     "last_release": "3.1"WRONGJSON
   }
   `

	rcIncremental := &ClosingBuffer{
		bytes.NewBufferString(incremental),
	}
	defer rcIncremental.Close()

	m := &MockAPIClient{}
	m.On("GetIncremental").Return(rcIncremental, nil)
	m.On("GetCurrentRelease").Return(2, 5, nil)

	r := NewRelease(m, instanceData)

	r.Revision = 2
	r.Incremental = 3
	r.instancesData[0].hashBlacklist["hash60"] = 60
	r.instancesData[0].hashWhitelist["hash40"] = 40
	r.instancesData[0].ipBlacklist["ip65"] = 65
	r.instancesData[0].ipWhitelist["ip35"] = 35
	r.instancesData[1].hashWhitelist["hash60"] = 60
	r.instancesData[1].hashWhitelist["hash40"] = 40
	r.instancesData[1].ipWhitelist["ip65"] = 65
	r.instancesData[1].ipWhitelist["ip35"] = 35

	r.Update()

	assert.Equal(t, 2, r.Revision, "Wrong revision")
	assert.Equal(t, 3, r.Incremental, "Wrong incremental")

	// Instance 1

	assert.Equal(t, 1, len(r.instancesData[0].hashBlacklist))
	assert.Equal(t, 1, len(r.instancesData[0].ipBlacklist))

	assert.Equal(t, 60, r.instancesData[0].hashBlacklist["hash60"], "Wrong HASH score")
	assert.Equal(t, 65, r.instancesData[0].ipBlacklist["ip65"], "Wrong IP score")

	assert.Equal(t, 1, len(r.instancesData[0].hashWhitelist))
	assert.Equal(t, 1, len(r.instancesData[0].ipWhitelist))

	assert.Equal(t, 40, r.instancesData[0].hashWhitelist["hash40"], "Wrong HASH score")
	assert.Equal(t, 35, r.instancesData[0].ipWhitelist["ip35"], "Wrong IP score")

	// Instance 2

	assert.Equal(t, 0, len(r.instancesData[1].hashBlacklist))
	assert.Equal(t, 0, len(r.instancesData[1].ipBlacklist))

	assert.Equal(t, 2, len(r.instancesData[1].hashWhitelist))
	assert.Equal(t, 2, len(r.instancesData[1].ipWhitelist))

	assert.Equal(t, 40, r.instancesData[1].hashWhitelist["hash40"], "Wrong HASH score")
	assert.Equal(t, 60, r.instancesData[1].hashWhitelist["hash60"], "Wrong HASH score")
	assert.Equal(t, 35, r.instancesData[1].ipWhitelist["ip35"], "Wrong IP score")
	assert.Equal(t, 65, r.instancesData[1].ipWhitelist["ip65"], "Wrong IP score")
}

////////////////////////////////////////////////////////////////////////////////

func Test_Dump(t *testing.T) {

	r := NewRelease(nil, instanceData)

	r.Revision = 2
	r.Incremental = 0

	r.instancesData[0].hashBlacklist["866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4"] = 85

	r.instancesData[0].ipBlacklist["151.80.200.230"] = 80
	r.instancesData[0].ipBlacklist["104.219.238.81"] = 50

	r.instancesData[0].hashWhitelist["866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4"] = 25

	r.instancesData[0].ipWhitelist["222.161.187.107"] = 0

	os.Mkdir("../tests_files", os.ModePerm)

	err := r.Dump()
	if err != nil {
		t.Error(err)
	}

	hashBlacklistFile, err := os.Open("../tests_files/hash_blacklist_1")
	if err != nil {
		t.Error(err)
	}
	defer hashBlacklistFile.Close()

	ipBlacklistFile, err := os.Open("../tests_files/ip_blacklist_1")
	if err != nil {
		t.Error(err)
	}
	defer ipBlacklistFile.Close()

	hashWhitelistFile, err := os.Open("../tests_files/hash_whitelist_1")
	if err != nil {
		t.Error(err)
	}
	defer hashWhitelistFile.Close()

	ipWhitelistFile, err := os.Open("../tests_files/ip_whitelist_1")
	if err != nil {
		t.Error(err)
	}
	defer ipWhitelistFile.Close()

	var scanner *bufio.Scanner
	var found int
	var entries int

	scanner = bufio.NewScanner(hashBlacklistFile)
	for scanner.Scan() {
		if scanner.Text() == "866a61026809ce28f6ea022jd7h7fe097a935bce8ba3f653acf98jug659615c4" {
			found++
		}
		entries++
	}
	assert.Equal(t, 1, found, "Missing hashes")
	assert.Equal(t, 1, entries, "Unknow hashes on file")
	if err != nil {
		t.Error(err)
	}

	found = 0
	entries = 0
	scanner = bufio.NewScanner(ipBlacklistFile)
	for scanner.Scan() {
		if scanner.Text() == "104.219.238.81" {
			found++
		}
		if scanner.Text() == "151.80.200.230" {
			found++
		}
		entries++
	}
	assert.Equal(t, 2, found, "Missing IPs")
	assert.Equal(t, 2, entries, "Unknow IPs on file")

	found = 0
	entries = 0
	scanner = bufio.NewScanner(hashWhitelistFile)
	for scanner.Scan() {
		if scanner.Text() == "866a61026809ce28f6ea02228607fe097a935bce8ba3f653acfb51ff659615c4" {
			found++
		}
		entries++
	}
	assert.Equal(t, 1, found, "Missing hashes")
	assert.Equal(t, 1, entries, "Unknow hashes on file")

	found = 0
	entries = 0
	scanner = bufio.NewScanner(ipWhitelistFile)
	for scanner.Scan() {
		if scanner.Text() == "222.161.187.107" {
			found++
		}
		entries++
	}
	assert.Equal(t, 1, found, "Missing IPs")
	assert.Equal(t, 1, entries, "Unknow IPs on file")

	os.RemoveAll("../tests_files")
	if err != nil {
		t.Error(err)
	}
}

// TODO GetCurrentRelease FAIL
// TODO Reload
// TODO Create files
