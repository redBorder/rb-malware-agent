MKL_RED?=   \033[031m
MKL_GREEN?= \033[032m
MKL_YELLOW?=    \033[033m
MKL_BLUE?=  \033[034m
MKL_CLR_RESET?= \033[0m
BIN=                        rb_malware_agent
SNORT_CONTROL=  rb_snort_control
prefix?=                /usr/local
bindir?=                $(prefix)/bin
all: vendor build
build: rb_malware_agent rb_snort_control
get: vendor
    
rb_malware_agent:
    @printf "$(MKL_YELLOW)Building $(BIN)$(MKL_CLR_RESET)\n"
    go build -ldflags "-X main.githash=`git rev-parse HEAD` -X main.version=`git describe --tags --always --dirty=-dev`" -o $(BIN) ./cmd/app/
rb_snort_control:
    @printf "$(MKL_YELLOW)Building $(SNORT_CONTROL)$(MKL_CLR_RESET)\n"
    go build -ldflags "-X main.githash=`git rev-parse HEAD` -X main.version=`git describe --tags --always --dirty=-dev`" -o $(SNORT_CONTROL) ./cmd/snort-control/
install: build
    @printf "$(MKL_YELLOW)Install $(BIN) to $(bindir)$(MKL_CLR_RESET)\n"
    install $(BIN) $(bindir)
uninstall:
    @printf "$(MKL_RED)Uninstall $(BIN) from $(bindir)$(MKL_CLR_RESET)\n"
    rm -f $(bindir)/$(BIN)
test:
    @printf "$(MKL_YELLOW)Running tests$(MKL_CLR_RESET)\n"
    @go test -race  -v ./client
    @go test -race -v ./snortcontrol
    @printf "$(MKL_GREEN)Test passed$(MKL_CLR_RESET)\n"
coverage:
    @printf "$(MKL_YELLOW)Computing coverage$(MKL_CLR_RESET)\n"
    @go test -covermode=count -coverprofile=batch.part -tags=integration ./client
    @go test -covermode=count -coverprofile=httpsender.part -tags=integration ./snortcontrol
    @echo "mode: count" > coverage.out
    @grep -h -v "mode: count" *.part >> coverage.out
    @go tool cover -func coverage.out
after_deps:
    @echo "Checking if go.mod and go.sum exist..."
    @if [ -f go.mod ] && [ -f go.sum ]; then \
        echo "go.mod and go.sum files exist"; \
    else \
        echo "go.mod and/or go.sum files are missing"; \
        echo "Creating module..."; \
        go mod init rb-malware-agent; \
        go mod tidy; \
        go mod vendor; \
        $(MAKE) build; \
    fi
GLIDE := $(shell command -v glide 2> /dev/null)
vendor:
ifndef GLIDE
    $(error glide is not installed. Install it with "curl https://glide.sh/get | sh")
endif
    @printf "$(MKL_YELLOW)Installing deps$(MKL_CLR_RESET)\n"
    @glide update
    @$(MAKE) after_deps
clean:
    rm -f $(BIN) $(SNORT_CONTROL)
    rm -rf vendor/
    rm -rf go.mod go.sum glide.lock